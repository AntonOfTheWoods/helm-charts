{{- if .Values.functions.enabled }}
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "supabase.functions.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  {{- $versionLabel := dict "app.kubernetes.io/version" ( include "common.images.version" ( dict "imageRoot" .Values.functions.image "chart" .Chart ) ) }}
  {{- $labels := include "common.tplvalues.merge" ( dict "values" ( list .Values.commonLabels $versionLabel ) "context" . ) }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" $labels "context" $ ) | nindent 4 }}
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: functions
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.functions.replicaCount }}
  {{- if .Values.functions.updateStrategy }}
  strategy: {{- toYaml .Values.functions.updateStrategy | nindent 4 }}
  {{- end }}
  {{- $podLabels := include "common.tplvalues.merge" ( dict "values" ( list .Values.functions.podLabels .Values.commonLabels $versionLabel ) "context" . ) }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" ( dict "customLabels" $podLabels "context" $ ) | nindent 6 }}
      app.kubernetes.io/component: functions
  template:
    metadata:
      annotations:
        {{- if .Values.functions.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.functions.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
      labels: {{- include "common.labels.standard" ( dict "customLabels" $podLabels "context" $ ) | nindent 8 }}
        app.kubernetes.io/part-of: supabase
        app.kubernetes.io/component: functions
    spec:
      serviceAccountName: {{ template "supabase.serviceAccountName" . }}
      {{- include "supabase.imagePullSecrets" . | nindent 6 }}
      automountServiceAccountToken: {{ .Values.functions.automountServiceAccountToken }}
      {{- if .Values.functions.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.functions.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.functions.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.functions.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.functions.podAffinityPreset "component" "functions" "customLabels" $podLabels "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.functions.podAntiAffinityPreset "component" "functions" "customLabels" $podLabels "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.functions.nodeAffinityPreset.type "key" .Values.functions.nodeAffinityPreset.key "values" .Values.functions.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.functions.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.functions.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.functions.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.functions.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.functions.priorityClassName }}
      priorityClassName: {{ .Values.functions.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.functions.schedulerName }}
      schedulerName: {{ .Values.functions.schedulerName | quote }}
      {{- end }}
      {{- if .Values.functions.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.functions.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.functions.podSecurityContext.enabled }}
      securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.functions.podSecurityContext "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.functions.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.functions.terminationGracePeriodSeconds }}
      {{- end }}
      initContainers:
        {{- if not .Values.functions.diagnosticMode.enabled }}
        {{- include "supabase.waitForDBInitContainer" . | nindent 8 }}
        {{- end }}
        {{- if .Values.functions.initContainers }}
          {{- include "common.tplvalues.render" (dict "value" .Values.functions.initContainers "context" $) | nindent 8 }}
        {{- end }}
      containers:
        - name: supabase-functions
          image: {{ template "supabase.functions.image" . }}
          imagePullPolicy: {{ .Values.functions.image.pullPolicy }}
          {{- if .Values.functions.containerSecurityContext.enabled }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.functions.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}

          {{- if .Values.functions.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.functions.diagnosticMode.command "context" $) | nindent 10 }}
          {{- else if .Values.functions.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.functions.command "context" $) | nindent 10 }}
          {{- end }}

          {{- if .Values.functions.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.functions.diagnosticMode.args "context" $) | nindent 10 }}
          {{- else if .Values.functions.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.functions.args "context" $) | nindent 10 }}
          {{- else }}
          args:
            - start
            - "--port"
            - "{{ .Values.functions.containerPorts.http }}"
            - --main-service
            - {{ default "/home/deno/functions/main" .Values.functions.entrypointPath }}
          {{- end }}

          env:
            {{- include "supabase.database.envvars" . | indent 12 }}

            # THESE _MAY_ BE REQUIRED IN ADDITION TO POSTGRES_BACKEND_URL below!!!
            - name: DB_DATABASE
              value: $(DB_NAME)
            - name: DB_HOSTNAME
              value: $(DB_HOST)
            - name: DB_USERNAME
              value: $(DB_USER)
            - name: DB_DRIVER
              value: postgresql
            - name: DB_SSL
              value: disable

            - name: POSTGRES_BACKEND_URL
              value: $(DB_DRIVER)://$(DB_USER):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?search_path=auth&sslmode=$(DB_SSL)

            - name: USER_FUNCTIONS_PATH
              value: {{ default "/functions" .Values.functions.userFunctionsPath }}

            - name: SUPABASE_ANON_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "supabase.jwt.secretName" . }}
                  key: {{ include "supabase.jwt.anonSecretKey" . }}
            - name: SUPABASE_SERVICE_ROLE_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "supabase.jwt.secretName" . }}
                  key: {{ include "supabase.jwt.serviceSecretKey" . }}

            - name: SUPABASE_INTERNAL_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "supabase.jwt.secretName" . }}
                  key: {{ include "supabase.jwt.secretKey" . }}

            - name: SUPABASE_INTERNAL_DEBUG
              value: {{ default "false" .Values.functions.debug | quote }}

            - name: SUPABASE_INTERNAL_MEMORY_LIMIT_MB
              value: {{ default "256" .Values.functions.workerMemoryLimitMb | quote }}
            - name: SUPABASE_INTERNAL_WALLCLOCK_LIMIT_SEC
              value: {{ default "400" .Values.functions.workerTimeoutSec | quote }}
            - name: SUPABASE_INTERNAL_CPU_TIME_SOFT_LIMIT_MS
              value: {{ default "1000" .Values.functions.workerCPUTimeSoftLimitMs | quote }}
            - name: SUPABASE_INTERNAL_CPU_TIME_HARD_LIMIT_MS
              value: {{ default "2000" .Values.functions.workerCPUTimeHardLimitMs | quote }}
            - name: SUPABASE_INTERNAL_FORCE_CREATE
              value: {{ default "false" .Values.functions.workerForceCreate | quote }}
            - name: SUPABASE_INTERNAL_NET_ACCESS_DISABLED
              value: {{ default "false" .Values.functions.workerNetAccessDisabled | quote }}
            - name: SUPABASE_INTERNAL_NO_MODULE_CACHE
              value: {{ default "false" .Values.functions.workerNoModuleCache | quote }}

            # {{- if .Values.functions.workerImportMapPath }}
            # - name: WORKER_IMPORT_MAP_PATH
            #   value: {{ .Values.functions.workerImportMapPath | quote }}
            # {{- end }}

            {{- if .Values.functions.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.functions.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}

          envFrom:
            {{- if .Values.functions.extraConfigExistingConfigmap }}
            - configMapRef:
                name: {{ include "supabase.functions.extraConfigmapName" . }}
            {{- end }}
            {{- if .Values.functions.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.functions.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.functions.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.functions.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.functions.resources }}
          resources: {{- toYaml .Values.functions.resources | nindent 12 }}
          {{- else if ne .Values.functions.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.functions.resourcesPreset) | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.functions.containerPorts.http }}
          {{- if not .Values.functions.diagnosticMode.enabled }}
          {{- if .Values.functions.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.functions.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.functions.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.functions.livenessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /_internal/health
              port: http
          {{- end }}
          {{- if .Values.functions.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.functions.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.functions.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.functions.readinessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /_internal/health
              port: http
          {{- end }}
          {{- if .Values.functions.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.functions.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.functions.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.functions.startupProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /_internal/health
              port: http
          {{- end }}
          {{- end }}
          {{- if .Values.functions.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.functions.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: functions-main
              mountPath: {{ default "/home/deno/functions/main" .Values.functions.entrypointPath }}
            - name: data
              mountPath: {{ .Values.functions.persistence.mountPath }}
              {{- if .Values.functions.persistence.subPath }}
              subPath: {{ .Values.functions.persistence.subPath }}
              {{- end }}
          {{- if .Values.functions.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.functions.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        {{- if .Values.functions.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.functions.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: functions-main
          configMap:
            name: {{ include "supabase.functions.defaultConfigmapName" . }}
        - name: data
        {{- if .Values.functions.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ default (include "supabase.functions.fullname" .) .Values.functions.persistence.existingClaim }}
        {{- else }}
          emptyDir: {}
        {{- end }}
        {{- if .Values.functions.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.functions.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
{{- end }}
