global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
  compatibility:
    openshift:
      adaptSecurityContext: auto

  analytics:
    existingSecret: ""
    existingSecretApiKey: "api-key"

analytics:
  enabled: true
  existingSecret: ""
  apiKey: ""
  diagnosticMode:
    enabled: false
    command:
      - sleep
    args:
      - infinity
  replicaCount: 1
  extraConfig: {}
  existingConfigmap: ""
  extraConfigExistingConfigmap: ""
  image:
    registry: docker.io
    repository: supabase/logflare
    tag: "1.4.0"  # WARNING - later versions are NOT compatible with the current supabase studio version
    pullPolicy: IfNotPresent
    digest: ""
    pullSecrets: []
  containerPorts:
    http: 4000

  application:
    logflareNodeHost: 127.0.0.1
    # TODO: create a schema if specified
    # dbSchema: _analytics

  # Enable Big Query backend for analytics
  bigQuery:
    enabled: false
    projectId: google-project-id
    projectNumber: google-project-number
    gcloudJson: ""

  livenessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  resourcesPreset: "small"
  resources: {}
  podSecurityContext:
    enabled: false  # FIXME:
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  containerSecurityContext:
    enabled: false  # FIXME:
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  command: []
  args: []
  automountServiceAccountToken: false
  hostAliases: []
  podLabels: {}
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  updateStrategy:
    type: RollingUpdate
  priorityClassName: ""
  topologySpreadConstraints: []
  schedulerName: ""
  terminationGracePeriodSeconds: ""
  lifecycleHooks: {}
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  service:
    type: ClusterIP
    ports:
      http: 80
    nodePorts:
      http: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    extraPorts: []
    sessionAffinity: None
    sessionAffinityConfig: {}
  networkPolicy:
    enabled: true
    allowExternal: true
    allowExternalEgress: true
    extraIngress: []
    extraEgress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}

analyticsdb:
  enabled: true
  postgresqlSharedPreloadLibraries: "pg_stat_statements, pg_stat_monitor, pgaudit, plpgsql, plpgsql_check, pg_cron, pg_net, pgsodium, timescaledb, auto_explain"
  image:
    repository: bitnami/supabase-postgres
    tag: "15.1.1-debian-12-r24"
  primary:
    extendedConfiguration: |-
      wal_level = logical
      huge_pages = off

  # these are not from the bitnami postgresql chart, but additions copied from the supabase chart for the pg dep
  service:
    ports:
      postgresql: 5432

## External PostgreSQL configuration
## All of these values are only used when analyticsdb.enabled is set to false
## @param externalDatabaseAnalyticsdb.host Database host
## @param externalDatabaseAnalyticsdb.port Database port number
## @param externalDatabaseAnalyticsdb.user Non-root username for PostgreSQL
## @param externalDatabaseAnalyticsdb.password Password for the non-root username for PostgreSQL
## @param externalDatabaseAnalyticsdb.database PostgreSQL database name
## @param externalDatabaseAnalyticsdb.existingSecret Name of an existing secret resource containing the database credentials
## @param externalDatabaseAnalyticsdb.existingSecretPasswordKey Name of an existing secret key containing the database credentials
##
externalDatabaseAnalyticsdb:
  host: "externaldb"
  port: 1111
  user: supabase_admin_analytics
  database: postgresisgreat
  password: "badpassword"
  existingSecret: ""
  existingSecretPasswordKey: ""

functions:
  enabled: true
  diagnosticMode:
    enabled: false
    command:
      - sleep
    args:
      - infinity
  userFunctionsPath: /bitnami/supabase-functions
  entrypointPath: /home/deno/functions/main
  replicaCount: 1
  extraConfig: {}
  existingConfigmap: ""
  extraConfigExistingConfigmap: ""
  image:
    registry: docker.io
    repository: supabase/edge-runtime
    tag: v1.46.0
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  containerPorts:
    http: 80
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  resourcesPreset: "micro"
  resources: {}
  podSecurityContext:
    enabled: false  # FIXME:
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  containerSecurityContext:
    enabled: false  # FIXME:
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  command: []
  args: []
  automountServiceAccountToken: false
  hostAliases: []
  podLabels: {}
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  updateStrategy:
    type: RollingUpdate
  priorityClassName: ""
  topologySpreadConstraints: []
  schedulerName: ""
  terminationGracePeriodSeconds: ""
  lifecycleHooks: {}
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  service:
    type: ClusterIP
    ports:
      http: 80
    nodePorts:
      http: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    extraPorts: []
    sessionAffinity: None
    sessionAffinityConfig: {}
  networkPolicy:
    enabled: true
    allowExternal: true
    allowExternalEgress: true
    extraIngress: []
    extraEgress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  persistence:
    enabled: true
    mountPath: /bitnami/supabase-functions
    subPath: ""
    storageClass: ""
    annotations: {}
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    existingClaim: ""
    selector: {}
    dataSource: {}

imgproxy:
  enabled: true
  diagnosticMode:
    enabled: false
    command:
      - sleep
    args:
      - infinity
  replicaCount: 1
  extraConfig: {}
  existingConfigmap: ""
  extraConfigExistingConfigmap: ""
  image:
    registry: docker.io
    repository: darthsim/imgproxy
    tag: v3.23.0
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  containerPorts:
    http: 5001
  application:
    # localFilesystemRoot: /
    useEtag: true
    enableWebpDetection: true

  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  resourcesPreset: "medium"
  resources: {}
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  command: []
  args: []
  automountServiceAccountToken: false
  hostAliases: []
  podLabels: {}
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  updateStrategy:
    type: RollingUpdate
  priorityClassName: ""
  topologySpreadConstraints: []
  schedulerName: ""
  terminationGracePeriodSeconds: ""
  lifecycleHooks: {}
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  service:
    type: ClusterIP
    ports:
      http: 5001
    nodePorts:
      http: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    extraPorts: []
    sessionAffinity: None
    sessionAffinityConfig: {}
  networkPolicy:
    enabled: true
    allowExternal: true
    allowExternalEgress: true
    extraIngress: []
    extraEgress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  persistence:
    enabled: true
    mountPath: /bitnami/supabase-imgproxy
    subPath: ""
    storageClass: ""
    annotations: {}
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    existingClaim: ""
    selector: {}
    dataSource: {}

minio:
  enabled: false
  defaultBuckets: stub

supabase:
  enabled: true
  kong:
    enabled: true
    kong:
      extraVolumeMounts:
        - name: rendered-declarative-conf
          mountPath: /bitnami/kong/declarative-conf/
      extraEnvVars:
        - name: KONG_DECLARATIVE_CONFIG
          value: "/bitnami/kong/declarative-conf/kong.yml"
        - name: KONG_DNS_ORDER
          value: LAST,A,CNAME
        - name: KONG_PLUGINS
          value: request-transformer,cors,key-auth,acl
    extraVolumes:
      - name: declarative-conf-template
        configMap:
          name: "supaplus-kong-declarative-config-full"
      - name: rendered-declarative-conf
        emptyDir: {}
    ingress:
      enabled: true
      tls: false
    service:
      type: ClusterIP

  postgresql:
    primary:
      extendedConfiguration: |-
        wal_level = logical
      persistence:
        enabled: true
        accessModes:
          - ReadWriteOnce
        size: 10Gi

  storage:
    existingConfigmap: "supaplus-supabase-storage-default-full"
    defaultConfigFull: |
      POSTGREST_URL: "http://{{ include "supabase.rest.fullname" .Subcharts.supabase }}:{{ .Values.supabase.rest.service.ports.http }}"
      FILE_STORAGE_BACKEND_PATH: {{ .Values.supabase.storage.persistence.mountPath | quote }}
      PGOPTIONS: "-c search_path=storage,public"
      FILE_SIZE_LIMIT: "52428800"
      TENANT_ID: "stub"
      REGION: "stub"
      GLOBAL_S3_BUCKET: "stub"
      DB_INSTALL_ROLES: "false"
      GLOBAL_S3_PROTOCOL: "http"
      GLOBAL_S3_FORCE_PATH_STYLE: "true"
      AWS_DEFAULT_REGION: "stub"
      ENABLE_IMAGE_TRANSFORMATION: "true"
      PORT: {{ .Values.supabase.storage.containerPorts.http | quote }}
      {{- if .Values.imgproxy.enabled }}
      IMGPROXY_URL: "http://{{ include "supaplus.imgproxy.fullname" . }}:{{ .Values.imgproxy.service.ports.http }}"
      {{- end }}
      {{- if .Values.minio.enabled }}
      GLOBAL_S3_ENDPOINT: http://{{ include "common.names.fullname" .Subcharts.minio }}:{{ default 9000 .Values.minio.service.ports.api }}
      STORAGE_BACKEND: "s3"
      {{- else }}
      STORAGE_BACKEND: "file"
      {{- end }}

  studio:
    image:
      # the bitnami chart is compatible with the upstream docker image
      repository: supabase/studio
      tag: 20240326-5e5586d
    existingConfigmap: "supaplus-supabase-studio-default-full"
    defaultConfigFull: |
      SUPABASE_URL: "http://{{ include "supabase.kong.fullname" .Subcharts.supabase }}.{{ include "common.names.namespace" . }}.svc.{{ .Values.supabase.clusterDomain }}:{{ .Values.supabase.kong.service.ports.proxyHttp }}"
      STUDIO_PG_META_URL: "http://{{ include "supabase.kong.fullname" .Subcharts.supabase }}.{{ include "common.names.namespace" . }}.svc.{{ .Values.supabase.clusterDomain }}:{{ .Values.supabase.kong.service.ports.proxyHttp }}/pg"
      SUPABASE_PUBLIC_URL: {{ include "supabase.api.publicURL" .Subcharts.supabase | quote }}
      PORT: {{ .Values.supabase.studio.containerPorts.http | quote }}
      LOGFLARE_URL: "http://{{ include "supaplus.analytics.fullname" . }}:{{ .Values.analytics.service.ports.http }}"

    extraEnvVars:
      # - name: STUDIO_DEFAULT_ORGANIZATION
      #   value: "default"
      # - name: STUDIO_DEFAULT_PROJECT
      #   value: "default"
      - name: NEXT_PUBLIC_ENABLE_LOGS
        value: "true"
      - name: NEXT_ANALYTICS_BACKEND_PROVIDER
        value: postgres  # postgres, bigquery
      - name: LOGFLARE_API_KEY
        valueFrom:
          secretKeyRef:
            name: supaplus-logflare
            key: api-key

vector:
  image:
    tag: 0.37.1-debian
  # command: [ "/bin/bash", "-c", "--" ]
  # args: [ "while true; do sleep 10; done;" ]

  dataDir: "/vector-data-dir"
  role: "Agent"
  enabled: true
  existingConfigMaps:
    - 'supaplus-vectoragent-config'
  containerPorts:
    - name: prom-exporter
      containerPort: 9090
      protocol: TCP
  service:
    ports:
      - protocol: TCP
        port: 80
        targetPort: 9090
  env:
    - name: LOGFLARE_API_KEY
      valueFrom:
        secretKeyRef:
          name: supaplus-logflare
          key: api-key
