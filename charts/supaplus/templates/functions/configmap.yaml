{{- if and .Values.functions.enabled (not .Values.functions.existingConfigmap) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "supaplus.functions.fullname" . }}-default
  namespace: {{ include "common.names.namespace" . | quote }}
  {{- $versionLabel := dict "app.kubernetes.io/version" ( include "common.images.version" ( dict "imageRoot" .Values.functions.image "chart" .Chart ) ) }}
  {{- $labels := include "common.tplvalues.merge" ( dict "values" ( list .Values.commonLabels $versionLabel ) "context" . ) }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" $labels "context" $ ) | nindent 4 }}
    app.kubernetes.io/part-of: supaplus
    app.kubernetes.io/component: functions
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}

data:
  index.ts: |
    import { serve } from "https://deno.land/std@0.131.0/http/server.ts";
    import * as jose from "https://deno.land/x/jose@v4.14.4/index.ts";

    console.log("main function started");

    const JWT_SECRET = Deno.env.get("JWT_SECRET");
    const VERIFY_JWT = Deno.env.get("VERIFY_JWT") === "true";
    const USER_FUNCTIONS_PATH = Deno.env.get("USER_FUNCTIONS_PATH");

    function getAuthToken(req: Request) {
      const authHeader = req.headers.get("authorization");
      if (!authHeader) {
        throw new Error("Missing authorization header");
      }
      const [bearer, token] = authHeader.split(" ");
      if (bearer !== "Bearer") {
        throw new Error(`Auth header is not 'Bearer {token}'`);
      }
      return token;
    }

    async function verifyJWT(jwt: string): Promise<boolean> {
      const encoder = new TextEncoder();
      const secretKey = encoder.encode(JWT_SECRET);
      try {
        await jose.jwtVerify(jwt, secretKey);
      } catch (err) {
        console.error(err);
        return false;
      }
      return true;
    }

    serve(async (req: Request) => {
      if (req.method !== "OPTIONS" && VERIFY_JWT) {
        try {
          const token = getAuthToken(req);
          const isValidJWT = await verifyJWT(token);

          if (!isValidJWT) {
            return new Response(JSON.stringify({ msg: "Invalid JWT" }), {
              status: 401,
              headers: { "Content-Type": "application/json" },
            });
          }
        } catch (e) {
          console.error(e);
          return new Response(JSON.stringify({ msg: e.toString() }), {
            status: 401,
            headers: { "Content-Type": "application/json" },
          });
        }
      }

      const url = new URL(req.url);
      const { pathname } = url;
      if (pathname === "/_internal/health") {
        return new Response(JSON.stringify({ message: "ok" }), {
          status: 200,
          headers: { "Content-Type": "application/json" },
        });
      }
      if (pathname === "/_internal/metric") {
        return Response.json(await EdgeRuntime.getRuntimeMetrics());
      }
      const path_parts = pathname.split("/");
      const service_name = path_parts[1];

      if (!service_name || service_name === "") {
        const error = { msg: "missing function name in request" };
        return new Response(JSON.stringify(error), {
          status: 400,
          headers: { "Content-Type": "application/json" },
        });
      }

      const servicePath = `${USER_FUNCTIONS_PATH}/${service_name}`;
      console.error(`serving the request with ${servicePath}`);

      const memoryLimitMb = parseInt(
        Deno.env.get("WORKER_MEMORY_LIMIT_MB") || "150"
      );
      const workerTimeoutMs = parseInt(
        Deno.env.get("WORKER_TIMEOUT_MS") || `${1 * 60 * 1000}`
      );
      const noModuleCache = Deno.env.get("WORKER_NO_MODULE_CACHE") === "true";
      const importMapPath = Deno.env.get("WORKER_IMPORT_MAP_PATH") || null;

      const cpuTimeSoftLimitMs = parseInt(
        Deno.env.get("WORKER_CPU_TIME_SOFT_LIMIT_MS") || "1000"
      );
      const cpuTimeHardLimitMs = parseInt(
        Deno.env.get("WORKER_CPU_TIME_HARD_LIMIT_MS") || "2000"
      );
      const forceCreate = Deno.env.get("WORKER_FORCE_CREATE") === "true";
      const netAccessDisabled =
        Deno.env.get("WORKER_NET_ACCESS_DISABLED") === "true";

      const envVarsObj = Deno.env.toObject();
      const envVars = Object.keys(envVarsObj).map((k) => [k, envVarsObj[k]]);

      // load source from an eszip
      //const maybeEszip = await Deno.readFile('./bin.eszip');
      //const maybeEntrypoint = 'file:///src/index.ts';

      // const maybeEntrypoint = 'file:///src/index.ts';
      // or load module source from an inline module
      // const maybeModuleCode = 'Deno.serve((req) => new Response("Hello from Module Code"));';
      //

      try {
        const worker = await EdgeRuntime.userWorkers.create({
          servicePath,
          memoryLimitMb,
          workerTimeoutMs,
          noModuleCache,
          importMapPath,
          envVars,
          forceCreate,
          netAccessDisabled,
          cpuTimeSoftLimitMs,
          cpuTimeHardLimitMs,
          // maybeEszip,
          // maybeEntrypoint,
          // maybeModuleCode,
        });
        return await worker.fetch(req);
      } catch (e) {
        const error = { msg: e.toString() };
        return new Response(JSON.stringify(error), {
          status: 500,
          headers: { "Content-Type": "application/json" },
        });
      }
    });

{{- end }}